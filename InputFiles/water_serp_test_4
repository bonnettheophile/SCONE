type timeDependentPhysicsPackage;

pop      1000000;
timeSteps   70;
XSdata   ce;
dataType ce;
timeIncrement 1.E-05;
//buffer 500000;
combing 1; //toggle on or off
//precursors 0; //toggle on or off
//batches 100; // not implemented!!
cycles 20;

outputFormat asciiJSON;
collisionOperator { neutronCE {type neutronCEtime; precursors 0;} }
                  
transportOperator { type transportOperatorDT;
                  }

source {
  type pointSource;
  r (0.0 0.0 0.0);//(-31.00 0.0 0.0);
  //dir (0.0 0.0 1.0); //ask valeria, should it be 1.0, 0.0, 0.0?
  particle neutron;
  E 14.1;
}

tally  {
  flux_time { type collisionClerk;
    //map { type multiMap; maps (map1 map2); // this supported properly in current implementation?
    //map1 { type cellMap; cells (8); }
    //map2 { type timeMap; grid lin; min 0.0; max 7E-04; N 70;}
    //} //make this work on averaged accross all cells, then fix multimap on time dependent
    map { type timeMap; grid lin; min 0.0; max 7E-04; N 70;}
    response (flux); flux {type fluxResponse;}
    handleVirtual 1;
  }
}

geometry {
    type geometryStd;
    boundary (0 0 0 0 0 0);
    graph {type shrunk;}

    surfaces { 
      sphereBound { type sphere; id 1; origin ( 0.0 0.0 0.0); radius 50.0; }
      sphereBoundtwo { type sphere; id 2; origin ( 0.0 0.0 0.0); radius 25.0; }
      }

    cells { 
      outerSphere { id 1; type simpleCell; surfaces (-1 2); filltype mat; material m1;}
      innerSphere { id 2; type simpleCell; surfaces (-2); filltype mat; material void;} 
      }


    universes
    {
      root{id 1; type rootUniverse; border 1; fill u<2>;}
      geom { id 2; type cellUniverse; cells (1 2);}    //cells (1 2 3 4 5 6 7 8 9 20 21)
    }
}

nuclearData {
  handles {
    ce { type aceNeutronDatabase; aceLibrary $SCONE_ACE;} }
  materials {

    //water
    m1 {
      temp 12345;
      composition {
        1001.03    0.06639;
        8016.03   0.03347;}
      //moder { 1001.00 h-h2o-293; }
    }
}

}



